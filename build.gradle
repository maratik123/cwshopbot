//    cwshopbot
//    Copyright (C) 2019  Marat Bukharov.
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU Affero General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.1.3.RELEASE'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
    }
}

plugins {
    id 'jacoco'
    id 'com.github.spotbugs' version '1.6.9'
    id 'net.researchgate.release' version '2.8.0'
    id 'io.franzbecker.gradle-lombok' version '2.0'
}

group 'name.maratik.cw'
version = version

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'https://jitpack.io'
    }
    maven {
        url 'http://invesdwin.de/artifactory/invesdwin-oss-remote'
    }
}

apply plugin: 'antlr'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'com.github.spotbugs'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'net.researchgate.release'
apply plugin: 'com.google.protobuf'
apply plugin: 'io.franzbecker.gradle-lombok'

sourceCompatibility = 11
targetCompatibility = 11

wrapper {
    gradleVersion = '5.1.1'
    distributionType = 'ALL'
}

configurations {
    compile.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    compile.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    compile.exclude group: 'com.vaadin.external.google', module: 'android-json'
    compile.exclude group: 'ch.qos.logback', module: 'logback-classic'
    compile.exclude group: 'ch.qos.logback', module: 'logback-core'
    compile.exclude group: 'org.slf4j', module: 'jcl-over-slf4j'
    compile.exclude group: 'org.slf4j', module: 'jul-to-slf4j'
}

dependencies {
    antlr 'org.antlr:antlr4:4.7.2'
    compile 'org.antlr:antlr4-runtime:4.7.2'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-log4j2'
    compile 'org.springframework.boot:spring-boot-starter-jetty'
    compile 'org.springframework.boot:spring-boot-starter-amqp'
    compile 'org.springframework.boot:spring-boot-starter-jdbc'
    compile 'org.springframework.boot:spring-boot-starter-aop'
    compile 'org.springframework.data:spring-data-jdbc'
    compile 'org.springframework:spring-aspects'
    compile 'org.postgresql:postgresql:42.2.5'
    compile 'org.telegram:telegrambots:4.1.2'
    compile 'com.google.guava:guava:27.1-jre'
    compile 'org.apache.logging.log4j:log4j-jcl'
    compile 'org.apache.logging.log4j:log4j-jul'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.8'
    compile 'com.fasterxml.jackson.module:jackson-module-afterburner:2.9.8'
    compile 'com.fasterxml.jackson.module:jackson-module-parameter-names:2.9.8'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.8'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.8'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.12.3'
    compile 'com.github.maratik123:spring-telegram:3.1'
    compile 'com.google.protobuf:protobuf-java:3.7.1'
    compile 'org.liquibase:liquibase-core:3.6.3'
    compile 'org.apache.commons:commons-dbcp2:2.6.0'
    compile 'de.invesdwin:invesdwin-instrument:1.0.2'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.springframework.amqp:spring-rabbit-junit'
    testCompile 'org.springframework.amqp:spring-rabbit-test'
    testCompile 'ru.yandex.qatools.embed:postgresql-embedded:2.10'
    testCompile 'de.flapdoodle.embed:de.flapdoodle.embed.process:2.1.2'
}

bootJar {
    launchScript()
}

bootRun {
    jvmArgs = [
            '-Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager',
            '-Xms64m',
            '-Xmx128m',
            '-server'
    ]
}

spotbugs {
    toolVersion = '3.1.11'
}

lombok {
    version = '1.18.4'
    sha256 = ''
}

generateGrammarSource {
    maxHeapSize = '64m'
    arguments += [
            '-long-messages',
            '-lib', 'src/main/antlr/name/maratik/cw/cwshopbot/parser/generated'
    ]
}

protobuf {
    generatedFilesBaseDir = project.file('generated').absolutePath
    protoc {
        artifact = 'com.google.protobuf:protoc:3.7.1'
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += [ '-parameters', '-Xlint:unchecked' ]
}

clean.delete << protobuf.generatedFilesBaseDir

idea {
    module {
        sourceDirs += generateGrammarSource.outputDirectory
        sourceDirs += project.file("${protobuf.generatedFilesBaseDir}/main/java")
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

coveralls {
    jacocoReportPath "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
}
